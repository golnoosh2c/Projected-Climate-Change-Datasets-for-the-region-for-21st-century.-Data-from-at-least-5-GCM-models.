#Importing All libraries:

import geopandas as gpd
import pandas as pd
import os
import fiona
# Set the file path
path = 'C:/Users/User/OneDrive/Desktop/Shape file'
os.chdir (path)
# Using Geopandas reading the Texas map from Shape file
county = gpd.read_file('County.shp')
county.plot()
# South East Texas Map plotting:(Study Area)
SETx =('48167|48071|48201|48245|48361|48291|48199|48339|48407|48471|48457|48373|48241|48351')
SET_x = county[county['FIPS_ST_CN'].str.contains(SETx)]
SET_x.plot()
SET_x.to_csv('SETx County.csv')
import pandas as pd

df= pd.read_csv('C:\\Users\\User\\OneDrive\\Desktop\\Project-02(Final files)\\shape file\\SETx County.csv')
df
import pandas as pd

df= pd.read_csv('C:\\Users\\User\\OneDrive\\Desktop\\Project-02(Final files)\\shape file\\SETx County.csv')
df
FIPS = df.iloc[:,4]
CountyName = df.iloc[:,7]
GID = df.iloc[:,8]
Shape = df.iloc[:,11]
df = pd.read_csv('C:\\Users\\User\\OneDrive\\Desktop\\shape\\city Name.csv')
df
CityName = df.iloc[:,1]
print(CityName)
Lat = df.iloc[:,2]
print(Lat)
Lon = df.iloc[:,3]
print(Lon)
Index = [] #For counting the cities,latitiude,longtitude in the loop
count = 1 
for check in Lon:  
    Index.append(count) #
    count = count + 1
path = 'C:\\Users\\User\\OneDrive\\Desktop\\Capston-02'
os.chdir (path)  # Defining the path where the table store
PositionTable = pd.DataFrame(0, columns = ['Grid ID','Latitude','longtitude','FIPS'], index = Index) # call the dataframe 
for check in Index: #checking for 28 cities
    check = check - 1
    check2 = int(check/2) #For each county we have 2 cities,in total 28 cities
    PositionTable.iloc[check] = [GID[check2],Lat[check],Lon[check],FIPS[check2]] #Projecting the data into new dataframe
PositionTable.to_csv('PositionTable.csv') #Converted as a CSV file
x = pd.read_csv('PositionTable.csv')
x
path = 'C:\\Users\\User\\OneDrive\\Desktop\\Capston-02'
os.chdir (path)  # Defining the path where the table store
CountyTable = pd.DataFrame(0, columns = ['FIPS','County Name'], index = Index)  # call the dataframe 
for check in Index:
    check = check - 1
    check2 = int(check/2)
    CountyTable.iloc[check] = [FIPS[check2],CountyName[check2]] #checking the data for specific columns
CountyTable.to_csv('CountyTable.csv') #coverting to csv file
y = pd.read_csv('CountyTable.csv')  #reading the csv file
print (y)
CityTable = pd.DataFrame(0, columns = ['City ID','City Name','Grid ID','FIPS'], index = Index)  # call the dataframe 
for check in Index:
    check = check - 1
    check2 = int(check/2)
    CityTable.iloc[check] = [check+1,CityName[check],GID[check2],FIPS[check2]]
CityTable.to_csv('CityTable.csv')
z = pd.read_csv('CityTable.csv')
print (z)
from netCDF4 import Dataset
names = os.listdir('C:\\Users\\User\\OneDrive\\Desktop\\Project-02(Final files)\\data')
for check in Index:
              locationlat = Lat[check-1] #Checking Lat for 28 cities
              locationlon = Lon[check-1] # Checking Lon for 28 cities
              DateAndTime =[] #Creating a empty dtaframe for Time
              x = 0  #considering the initial value for iteration
              for name in names:
                  varLab = ''  #use this empty string to match with our downloaded data
                  if 'pr' in name:
                      varLab = 'pr'  #taking precipitation data
                  if 'ts' in name:
                      varLab = 'ts'  #taking the surface temperature
                  if 'sfcWind' in name:
                      varLab = 'sfcWind' # taking the surface wind speed
                  if 'hur' in name:
                      varLab = 'hur'   # taking the humidity
                  if 'clt' in name:
                      varLab = 'clt'  #taking total cloud cover
                  dt = [] #creating a date time data frame
                  data = Dataset(r'C:\\Users\\User\\OneDrive\\Desktop\\Project-02(Final files)\\data\\'+name,'r')
                  time = data.variables['time'][:] #loading time from data
                  lat = data.variables['lat'][:]  #loading latitude from data
                  lon = data.variables['lon'][:]  #loading longitude from data
                  var = data.variables[str(varLab)][:] #load all variable from data
                  SqDiffLat = (locationlat - lat )**2  # To get the lowest latitude difference 
                  SqDiffLon = (-1*locationlon - lon )**2 #To get the lowest longitude difference
                  MinDiffLat = SqDiffLat.argmin()   # choose the lowest number for latitude
                  MinDiffLon = SqDiffLon.argmin()   # choose the lowest number for longitude
                  flag = 0  #to run the specific section of the program
                  for date in time:
                      year = (int(date/365)) #to get the exact year for our data as data start from 1850 in this netCDF file
                      if flag == 0:  
                          if '15' in name:
                              yearadd = 2015-year #to name the file we add the number
                          if '50' in name:
                              yearadd = 2050-year 
                      month = int((date-year*365)/30)+1 # to get the month
                      year = yearadd + year 
                      flag = 1
                      DateAndTime.append(str(year) + '-' +str(month)) # used as a string to append year & month
                  df = pd.DataFrame(0, columns = [str(varLab),'Latitude','longtitude'], index = DateAndTime) #call a the dataframe
                  x = 0 # staring valuo of dataframe
                  for time in range(0,var.__len__() ):
                      time = int(time)
                      MinDiffLat = int(MinDiffLat)
                      MinDiffLon = int(MinDiffLon)
                      if varLab == 'hur':
                          df.iloc[time] = [var[time,0,  MinDiffLat, MinDiffLon],lat[MinDiffLat],lon[MinDiffLon]] #to fill the dataframe used iloc
                      else:
                          df.iloc[time] = [var[time,  MinDiffLat, MinDiffLon],lat[MinDiffLat],lon[MinDiffLon]]
                  df.to_csv(r'C:\\Users\\User\\OneDrive\\Desktop\\Capston-02\\Extract CSV data'+str(locationlat)+' lat -'+str(locationlon)+' lon'+' - '+name) # Setting directory where the data will store 
